// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';
import 'package:meta/meta.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) => NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> main({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_main(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kMainConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "main",
        argNames: [],
      );

  Future<int> getCounter({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_counter(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kGetCounterConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetCounterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_counter",
        argNames: [],
      );

  Future<int> increment({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_increment(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kIncrementConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIncrementConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "increment",
        argNames: [],
      );

  Future<int> decrement({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_decrement(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kDecrementConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecrementConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "decrement",
        argNames: [],
      );

  Future<int> createStorageDirectory({required String s, dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_create_storage_directory(port_, _platform.api2wire_String(s)),
        parseSuccessData: _wire2api_i32,
        constMeta: kCreateStorageDirectoryConstMeta,
        argValues: [
          s
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateStorageDirectoryConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_storage_directory",
        argNames: [
          "s"
        ],
      );

  Future<void> initMysql({required String confPath, dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_init_mysql(port_, _platform.api2wire_String(confPath)),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitMysqlConstMeta,
        argValues: [
          confPath
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitMysqlConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init_mysql",
        argNames: [
          "confPath"
        ],
      );

  Future<List<String>> getStatusTypes({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_status_types(port_),
        parseSuccessData: _wire2api_StringList,
        constMeta: kGetStatusTypesConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetStatusTypesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_status_types",
        argNames: [],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}
