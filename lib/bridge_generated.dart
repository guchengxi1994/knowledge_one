// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> main({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_main(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kMainConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kMainConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main",
        argNames: [],
      );

  Future<int> getCounter({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_counter(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kGetCounterConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetCounterConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_counter",
        argNames: [],
      );

  Future<int> increment({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_increment(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kIncrementConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kIncrementConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "increment",
        argNames: [],
      );

  Future<int> decrement({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_decrement(port_),
        parseSuccessData: _wire2api_u64,
        constMeta: kDecrementConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDecrementConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decrement",
        argNames: [],
      );

  Future<int> createStorageDirectory({required String s, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_create_storage_directory(port_, _platform.api2wire_String(s)),
        parseSuccessData: _wire2api_i32,
        constMeta: kCreateStorageDirectoryConstMeta,
        argValues: [s],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateStorageDirectoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_storage_directory",
        argNames: ["s"],
      );

  Future<void> initMysql({required String confPath, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_init_mysql(port_, _platform.api2wire_String(confPath)),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitMysqlConstMeta,
        argValues: [confPath],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitMysqlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_mysql",
        argNames: ["confPath"],
      );

  Future<List<String>> getStatusTypes({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_status_types(port_),
        parseSuccessData: _wire2api_StringList,
        constMeta: kGetStatusTypesConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetStatusTypesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_status_types",
        argNames: [],
      );

  Future<List<TodoDetails>> getTodos({dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_todos(port_),
        parseSuccessData: _wire2api_list_todo_details,
        constMeta: kGetTodosConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetTodosConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_todos",
        argNames: [],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<TodoDetails> _wire2api_list_todo_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_todo_details).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  TodoDetails _wire2api_todo_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return TodoDetails(
      todoId: _wire2api_i64(arr[0]),
      todoName: _wire2api_opt_String(arr[1]),
      todoContent: _wire2api_opt_String(arr[2]),
      todoStatusName: _wire2api_opt_String(arr[3]),
      todoFrom: _wire2api_opt_String(arr[4]),
      todoTo: _wire2api_opt_String(arr[5]),
      taskName: _wire2api_opt_String(arr[6]),
      taskId: _wire2api_i64(arr[7]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_main(
    int port_,
  ) {
    return _wire_main(
      port_,
    );
  }

  late final _wire_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_main');
  late final _wire_main = _wire_mainPtr.asFunction<void Function(int)>();

  void wire_get_counter(
    int port_,
  ) {
    return _wire_get_counter(
      port_,
    );
  }

  late final _wire_get_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_counter');
  late final _wire_get_counter =
      _wire_get_counterPtr.asFunction<void Function(int)>();

  void wire_increment(
    int port_,
  ) {
    return _wire_increment(
      port_,
    );
  }

  late final _wire_incrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_increment');
  late final _wire_increment =
      _wire_incrementPtr.asFunction<void Function(int)>();

  void wire_decrement(
    int port_,
  ) {
    return _wire_decrement(
      port_,
    );
  }

  late final _wire_decrementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_decrement');
  late final _wire_decrement =
      _wire_decrementPtr.asFunction<void Function(int)>();

  void wire_create_storage_directory(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_create_storage_directory(
      port_,
      s,
    );
  }

  late final _wire_create_storage_directoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_storage_directory');
  late final _wire_create_storage_directory = _wire_create_storage_directoryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_mysql(
    int port_,
    ffi.Pointer<wire_uint_8_list> conf_path,
  ) {
    return _wire_init_mysql(
      port_,
      conf_path,
    );
  }

  late final _wire_init_mysqlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_mysql');
  late final _wire_init_mysql = _wire_init_mysqlPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_status_types(
    int port_,
  ) {
    return _wire_get_status_types(
      port_,
    );
  }

  late final _wire_get_status_typesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_status_types');
  late final _wire_get_status_types =
      _wire_get_status_typesPtr.asFunction<void Function(int)>();

  void wire_get_todos(
    int port_,
  ) {
    return _wire_get_todos(
      port_,
    );
  }

  late final _wire_get_todosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_todos');
  late final _wire_get_todos =
      _wire_get_todosPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
