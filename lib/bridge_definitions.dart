// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

abstract class Native {
  Future<int> createStorageDirectory({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateStorageDirectoryConstMeta;

  Future<int> createDiffDirectory({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateDiffDirectoryConstMeta;

  /// 获取文件hash值
  Future<String> getFileHash({required String filePath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFileHashConstMeta;

  /// 根据文件hash值软删除文件
  Future<int> deleteFileByFileHash({required String fileHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteFileByFileHashConstMeta;

  /// 改变版本控制
  Future<int> changeVersionControl({required String fileHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeVersionControlConstMeta;

  /// 手动更新新版本 （右键绑定新版本）
  Future<int> createNewVersion(
      {required NativeFileNewVersion model, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateNewVersionConstMeta;

  /// 根据现在的hash值获取变更记录
  Future<List<FileChangelog>?> getFileLogs(
      {required String fileHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFileLogsConstMeta;

  /// 初始化数据库，创建数据库连接池
  Future<void> initMysql({required String confPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitMysqlConstMeta;

  /// 获取所有状态
  Future<List<TodoStatus>> getStatusTypes({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetStatusTypesConstMeta;

  /// 获取所有todo
  Future<List<TodoDetails>> getTodos({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTodosConstMeta;

  /// 获取所有文件
  Future<List<FileDetails>> getFiles({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFilesConstMeta;

  /// 创建文件
  Future<int> newFile({required NativeFileSummary f, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFileConstMeta;
}

class FileChangelog {
  final int changelogId;
  final int fileId;
  final String? versionId;
  final String? prevVersionId;
  final int isDeleted;
  final DateTime createAt;
  final DateTime updateAt;
  final int fileLength;
  final String? filePath;
  final String? diffPath;

  FileChangelog({
    required this.changelogId,
    required this.fileId,
    this.versionId,
    this.prevVersionId,
    required this.isDeleted,
    required this.createAt,
    required this.updateAt,
    required this.fileLength,
    this.filePath,
    this.diffPath,
  });
}

class FileDetails {
  final int fileId;
  final String? fileName;
  final String? filePath;
  final int isDeleted;
  final DateTime createAt;
  final DateTime updateAt;
  final String? fileHash;
  final int versionControl;

  FileDetails({
    required this.fileId,
    this.fileName,
    this.filePath,
    required this.isDeleted,
    required this.createAt,
    required this.updateAt,
    this.fileHash,
    required this.versionControl,
  });
}

class NativeFileNewVersion {
  final String prevFilePath;
  final String prevFileHash;
  final String prevFileName;
  final String newVersionFilePath;
  final String newVersionFileHash;
  final String newVersionFileName;
  final String? diffPath;

  NativeFileNewVersion({
    required this.prevFilePath,
    required this.prevFileHash,
    required this.prevFileName,
    required this.newVersionFilePath,
    required this.newVersionFileHash,
    required this.newVersionFileName,
    this.diffPath,
  });
}

class NativeFileSummary {
  final String? fileName;
  final String? filePath;
  final String? fileHash;
  final int versionControl;

  NativeFileSummary({
    this.fileName,
    this.filePath,
    this.fileHash,
    required this.versionControl,
  });
}

class TodoDetails {
  final int todoId;
  final String? todoName;
  final String? todoContent;
  final String? todoStatusName;
  final String? todoFrom;
  final String? todoTo;
  final String? taskName;
  final int taskId;
  final String? todoStatusColor;

  TodoDetails({
    required this.todoId,
    this.todoName,
    this.todoContent,
    this.todoStatusName,
    this.todoFrom,
    this.todoTo,
    this.taskName,
    required this.taskId,
    this.todoStatusColor,
  });
}

class TodoStatus {
  final int todoStatusId;
  final String? todoStatusName;
  final String? todoStatusColor;

  TodoStatus({
    required this.todoStatusId,
    this.todoStatusName,
    this.todoStatusColor,
  });
}
